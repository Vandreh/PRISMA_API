    nest new prismaapi

    npm i --save @nestjs/core @nestjs/common @nestjs/config rxjs reflect-metadata


AULA: https://www.udemy.com/course/nestjs-do-zero/learn/lecture/30753278
arquivos criados:
.env
dotenv.txt
.eslintignore
.prettierignore

instalar as extenções:
editorconfig (cara de um ratinho branco)
eslint (icone escrito {ES Lint} de cor laranja)
Prettier - Code formatter (icone de um P)


Dar permissão somente em ambiente linux:
    chmod +x .docker/entrypoint.sh

criar arquivo:
    docker-compose.yml

    rm -rf node_modules
    docker-compose up
    docker-compose down

PRISMA:
    docker-compose exec app bash
    npm install prisma --save-dev     ou     npm install prisma -D


    npx prisma init
"Next steps:
1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
3. Run "prisma db pull" to turn your database schema into a Prisma schema.
4. Run "prisma generate" to generate the Prisma Client. You can then start querying your database."




    npx prisma migrate dev --name init

    nest g service prisma

estartar Prisma Studio para gerenciamento de banco de dados:
    npx prisma studio

    nest g --help 
criar crud com nestjs:
    nest g res users

npm install class-validator class-transformer

nest g filter common/filters/http-exception --no-spec

nest g res posts




git init
git status
git add .